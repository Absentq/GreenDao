package cn.sharesdk.testgreendao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.sharesdk.testgreendao.sqlite.TabInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAB_INFO".
*/
public class TabInfoDao extends AbstractDao<TabInfo, Void> {

    public static final String TABLENAME = "TAB_INFO";

    /**
     * Properties of entity TabInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Tab_Label = new Property(0, String.class, "tab_Label", false, "TAB__LABEL");
        public final static Property Tab_img_number = new Property(1, String.class, "tab_img_number", false, "TAB_IMG_NUMBER");
        public final static Property Tab_img = new Property(2, String.class, "tab_img", false, "TAB_IMG");
        public final static Property Tab_device = new Property(3, String.class, "tab_device", false, "TAB_DEVICE");
        public final static Property Tab_area = new Property(4, String.class, "tab_area", false, "TAB_AREA");
        public final static Property Tab_equipment = new Property(5, String.class, "tab_equipment", false, "TAB_EQUIPMENT");
        public final static Property Tab_number = new Property(6, String.class, "tab_number", false, "TAB_NUMBER");
        public final static Property Tab_flag = new Property(7, String.class, "tab_flag", false, "TAB_FLAG");
        public final static Property Tab_medium = new Property(8, String.class, "tab_medium", false, "TAB_MEDIUM");
        public final static Property Tab_floor = new Property(9, String.class, "tab_floor", false, "TAB_FLOOR");
        public final static Property Tab_height = new Property(10, String.class, "tab_height", false, "TAB_HEIGHT");
        public final static Property Tab_reference_material = new Property(11, String.class, "tab_reference_material", false, "TAB_REFERENCE_MATERIAL");
        public final static Property Tab_position = new Property(12, String.class, "tab_position", false, "TAB_POSITION");
        public final static Property Tab_direction = new Property(13, String.class, "tab_direction", false, "TAB_DIRECTION");
        public final static Property Tab_arrive = new Property(14, boolean.class, "tab_arrive", false, "TAB_ARRIVE");
        public final static Property Tab_unarrive = new Property(15, String.class, "tab_unarrive", false, "TAB_UNARRIVE");
        public final static Property Tab_additional_description = new Property(16, String.class, "tab_additional_description", false, "TAB_ADDITIONAL_DESCRIPTION");
    }


    public TabInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TabInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAB_INFO\" (" + //
                "\"TAB__LABEL\" TEXT," + // 0: tab_Label
                "\"TAB_IMG_NUMBER\" TEXT," + // 1: tab_img_number
                "\"TAB_IMG\" TEXT," + // 2: tab_img
                "\"TAB_DEVICE\" TEXT," + // 3: tab_device
                "\"TAB_AREA\" TEXT," + // 4: tab_area
                "\"TAB_EQUIPMENT\" TEXT," + // 5: tab_equipment
                "\"TAB_NUMBER\" TEXT," + // 6: tab_number
                "\"TAB_FLAG\" TEXT," + // 7: tab_flag
                "\"TAB_MEDIUM\" TEXT," + // 8: tab_medium
                "\"TAB_FLOOR\" TEXT," + // 9: tab_floor
                "\"TAB_HEIGHT\" TEXT," + // 10: tab_height
                "\"TAB_REFERENCE_MATERIAL\" TEXT," + // 11: tab_reference_material
                "\"TAB_POSITION\" TEXT," + // 12: tab_position
                "\"TAB_DIRECTION\" TEXT," + // 13: tab_direction
                "\"TAB_ARRIVE\" INTEGER NOT NULL ," + // 14: tab_arrive
                "\"TAB_UNARRIVE\" TEXT," + // 15: tab_unarrive
                "\"TAB_ADDITIONAL_DESCRIPTION\" TEXT);"); // 16: tab_additional_description
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAB_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TabInfo entity) {
        stmt.clearBindings();
 
        String tab_Label = entity.getTab_Label();
        if (tab_Label != null) {
            stmt.bindString(1, tab_Label);
        }
 
        String tab_img_number = entity.getTab_img_number();
        if (tab_img_number != null) {
            stmt.bindString(2, tab_img_number);
        }
 
        String tab_img = entity.getTab_img();
        if (tab_img != null) {
            stmt.bindString(3, tab_img);
        }
 
        String tab_device = entity.getTab_device();
        if (tab_device != null) {
            stmt.bindString(4, tab_device);
        }
 
        String tab_area = entity.getTab_area();
        if (tab_area != null) {
            stmt.bindString(5, tab_area);
        }
 
        String tab_equipment = entity.getTab_equipment();
        if (tab_equipment != null) {
            stmt.bindString(6, tab_equipment);
        }
 
        String tab_number = entity.getTab_number();
        if (tab_number != null) {
            stmt.bindString(7, tab_number);
        }
 
        String tab_flag = entity.getTab_flag();
        if (tab_flag != null) {
            stmt.bindString(8, tab_flag);
        }
 
        String tab_medium = entity.getTab_medium();
        if (tab_medium != null) {
            stmt.bindString(9, tab_medium);
        }
 
        String tab_floor = entity.getTab_floor();
        if (tab_floor != null) {
            stmt.bindString(10, tab_floor);
        }
 
        String tab_height = entity.getTab_height();
        if (tab_height != null) {
            stmt.bindString(11, tab_height);
        }
 
        String tab_reference_material = entity.getTab_reference_material();
        if (tab_reference_material != null) {
            stmt.bindString(12, tab_reference_material);
        }
 
        String tab_position = entity.getTab_position();
        if (tab_position != null) {
            stmt.bindString(13, tab_position);
        }
 
        String tab_direction = entity.getTab_direction();
        if (tab_direction != null) {
            stmt.bindString(14, tab_direction);
        }
        stmt.bindLong(15, entity.getTab_arrive() ? 1L: 0L);
 
        String tab_unarrive = entity.getTab_unarrive();
        if (tab_unarrive != null) {
            stmt.bindString(16, tab_unarrive);
        }
 
        String tab_additional_description = entity.getTab_additional_description();
        if (tab_additional_description != null) {
            stmt.bindString(17, tab_additional_description);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TabInfo entity) {
        stmt.clearBindings();
 
        String tab_Label = entity.getTab_Label();
        if (tab_Label != null) {
            stmt.bindString(1, tab_Label);
        }
 
        String tab_img_number = entity.getTab_img_number();
        if (tab_img_number != null) {
            stmt.bindString(2, tab_img_number);
        }
 
        String tab_img = entity.getTab_img();
        if (tab_img != null) {
            stmt.bindString(3, tab_img);
        }
 
        String tab_device = entity.getTab_device();
        if (tab_device != null) {
            stmt.bindString(4, tab_device);
        }
 
        String tab_area = entity.getTab_area();
        if (tab_area != null) {
            stmt.bindString(5, tab_area);
        }
 
        String tab_equipment = entity.getTab_equipment();
        if (tab_equipment != null) {
            stmt.bindString(6, tab_equipment);
        }
 
        String tab_number = entity.getTab_number();
        if (tab_number != null) {
            stmt.bindString(7, tab_number);
        }
 
        String tab_flag = entity.getTab_flag();
        if (tab_flag != null) {
            stmt.bindString(8, tab_flag);
        }
 
        String tab_medium = entity.getTab_medium();
        if (tab_medium != null) {
            stmt.bindString(9, tab_medium);
        }
 
        String tab_floor = entity.getTab_floor();
        if (tab_floor != null) {
            stmt.bindString(10, tab_floor);
        }
 
        String tab_height = entity.getTab_height();
        if (tab_height != null) {
            stmt.bindString(11, tab_height);
        }
 
        String tab_reference_material = entity.getTab_reference_material();
        if (tab_reference_material != null) {
            stmt.bindString(12, tab_reference_material);
        }
 
        String tab_position = entity.getTab_position();
        if (tab_position != null) {
            stmt.bindString(13, tab_position);
        }
 
        String tab_direction = entity.getTab_direction();
        if (tab_direction != null) {
            stmt.bindString(14, tab_direction);
        }
        stmt.bindLong(15, entity.getTab_arrive() ? 1L: 0L);
 
        String tab_unarrive = entity.getTab_unarrive();
        if (tab_unarrive != null) {
            stmt.bindString(16, tab_unarrive);
        }
 
        String tab_additional_description = entity.getTab_additional_description();
        if (tab_additional_description != null) {
            stmt.bindString(17, tab_additional_description);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TabInfo readEntity(Cursor cursor, int offset) {
        TabInfo entity = new TabInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // tab_Label
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // tab_img_number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tab_img
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tab_device
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tab_area
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tab_equipment
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // tab_number
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tab_flag
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // tab_medium
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // tab_floor
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tab_height
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // tab_reference_material
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // tab_position
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // tab_direction
            cursor.getShort(offset + 14) != 0, // tab_arrive
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // tab_unarrive
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // tab_additional_description
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TabInfo entity, int offset) {
        entity.setTab_Label(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTab_img_number(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTab_img(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTab_device(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTab_area(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTab_equipment(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTab_number(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTab_flag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTab_medium(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTab_floor(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTab_height(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTab_reference_material(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTab_position(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTab_direction(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTab_arrive(cursor.getShort(offset + 14) != 0);
        entity.setTab_unarrive(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTab_additional_description(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TabInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TabInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(TabInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
