package cn.sharesdk.testgreendao.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.sharesdk.testgreendao.sqlite.AreaInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "AREA_INFO".
*/
public class AreaInfoDao extends AbstractDao<AreaInfo, Void> {

    public static final String TABLENAME = "AREA_INFO";

    /**
     * Properties of entity AreaInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Area_label = new Property(0, String.class, "area_label", false, "AREA_LABEL");
        public final static Property Area_name = new Property(1, String.class, "area_name", false, "AREA_NAME");
    }


    public AreaInfoDao(DaoConfig config) {
        super(config);
    }
    
    public AreaInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"AREA_INFO\" (" + //
                "\"AREA_LABEL\" TEXT," + // 0: area_label
                "\"AREA_NAME\" TEXT);"); // 1: area_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"AREA_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, AreaInfo entity) {
        stmt.clearBindings();
 
        String area_label = entity.getArea_label();
        if (area_label != null) {
            stmt.bindString(1, area_label);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(2, area_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, AreaInfo entity) {
        stmt.clearBindings();
 
        String area_label = entity.getArea_label();
        if (area_label != null) {
            stmt.bindString(1, area_label);
        }
 
        String area_name = entity.getArea_name();
        if (area_name != null) {
            stmt.bindString(2, area_name);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public AreaInfo readEntity(Cursor cursor, int offset) {
        AreaInfo entity = new AreaInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // area_label
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // area_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, AreaInfo entity, int offset) {
        entity.setArea_label(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setArea_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(AreaInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(AreaInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(AreaInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
